{"ast":null,"code":"var _jsxFileName = \"/Users/samuelhancak/Documents/WebRTC/web-rtc-audio/src/App.js\";\nimport React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { PeerConnection } from \"./PeerConnection\";\n\nclass App extends Component {\n  /* constructor(props) {\n    super(props);\n     this.localVideoRef = React.createRef();\n  }\n   componentDidMount() {\n    const pc_config = null;\n     this.pc = new RTCPeerConnection(pc_config);\n     this.pc.onicecandidate = (e) => {\n      if (e.candidate) console.log(JSON.stringify(e.candidate));\n    };\n     this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e);\n    };\n     this.pc.ontrack = (e) => {\n      this.remoteVideoRef.current.srcObject = e.streams[0];\n    };\n     const constraints = { video: true };\n     const success = (stream) => {\n      window.localStream = stream;\n      this.localVideoRef.current.srcObject = stream;\n      this.pc.addStream(stream);\n    };\n     const fail = (e) => {\n      console.log(\"getUserMedia error: \", e);\n    };\n     navigator.mediaDevices.getUserMedia(constraints).then(success).catch(fail);\n  }\n   createOffer = () => {\n    console.log(\"Offer\");\n    this.pc.createOffer({ offerToReceiveVideo: 1 }).then(\n      (sdp) => {\n        console.log(JSON.stringify(sdp));\n        this.pc.setLocalDescription(sdp);\n      },\n      (e) => {}\n    );\n  };\n   setRemoteDescription = () => {\n    const desc = JSON.parse(this.textref.value);\n     this.pc.setRemoteDescription(new RTCSessionDescription(desc));\n  };\n   createAnswer = () => {\n    console.log(\"Answer\");\n    this.pc.createAnswer({ offerToReceiveVideo: 1 }).then(\n      (sdp) => {\n        console.log(JSON.stringify(sdp));\n        this.pc.setLocalDescription(sdp);\n      },\n      (e) => {}\n    );\n  };\n   addCandidate = () => {\n    const candidate = JSON.parse(this.textref.value);\n    console.log(\"Adding candidate:\", candidate);\n     this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n  };\n   render() {\n    return (\n      <div>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: \"black\",\n          }}\n          ref={this.localVideoRef}\n          autoPlay\n        ></video>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: \"black\",\n          }}\n          ref={this.remoteVideoRef}\n          autoPlay\n        ></video>\n         <button onClick={this.createOffer}>Offer</button>\n        <button onClick={this.createAnswer}>Answer</button>\n        <br />\n        <textarea\n          ref={(ref) => {\n            this.textarea = ref;\n          }}\n        />\n        <br />\n        <button onClick={this.setRemoteDescription}>\n          Set remote description\n        </button>\n        <button onClick={this.addCandidate}>Add cadidate</button>\n      </div>\n    );\n  } */\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"App-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }, \" Welcome to React \")), /*#__PURE__*/React.createElement(PeerConnection, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/samuelhancak/Documents/WebRTC/web-rtc-audio/src/App.js"],"names":["React","Component","PeerConnection","App","render","logo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,WAAP;AACA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;AAC1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHAG,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,GAAG,EAAEC,IAAV;AAAgB,MAAA,SAAS,EAAC,UAA1B;AAAqC,MAAA,GAAG,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFF,CADF,eAKE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AASD;;AA5HyB;;AA+H5B,eAAeF,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { PeerConnection } from \"./PeerConnection\";\n\nclass App extends Component {\n  /* constructor(props) {\n    super(props);\n\n    this.localVideoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const pc_config = null;\n\n    this.pc = new RTCPeerConnection(pc_config);\n\n    this.pc.onicecandidate = (e) => {\n      if (e.candidate) console.log(JSON.stringify(e.candidate));\n    };\n\n    this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e);\n    };\n\n    this.pc.ontrack = (e) => {\n      this.remoteVideoRef.current.srcObject = e.streams[0];\n    };\n\n    const constraints = { video: true };\n\n    const success = (stream) => {\n      window.localStream = stream;\n      this.localVideoRef.current.srcObject = stream;\n      this.pc.addStream(stream);\n    };\n\n    const fail = (e) => {\n      console.log(\"getUserMedia error: \", e);\n    };\n\n    navigator.mediaDevices.getUserMedia(constraints).then(success).catch(fail);\n  }\n\n  createOffer = () => {\n    console.log(\"Offer\");\n    this.pc.createOffer({ offerToReceiveVideo: 1 }).then(\n      (sdp) => {\n        console.log(JSON.stringify(sdp));\n        this.pc.setLocalDescription(sdp);\n      },\n      (e) => {}\n    );\n  };\n\n  setRemoteDescription = () => {\n    const desc = JSON.parse(this.textref.value);\n\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc));\n  };\n\n  createAnswer = () => {\n    console.log(\"Answer\");\n    this.pc.createAnswer({ offerToReceiveVideo: 1 }).then(\n      (sdp) => {\n        console.log(JSON.stringify(sdp));\n        this.pc.setLocalDescription(sdp);\n      },\n      (e) => {}\n    );\n  };\n\n  addCandidate = () => {\n    const candidate = JSON.parse(this.textref.value);\n    console.log(\"Adding candidate:\", candidate);\n\n    this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n  };\n\n  render() {\n    return (\n      <div>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: \"black\",\n          }}\n          ref={this.localVideoRef}\n          autoPlay\n        ></video>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: \"black\",\n          }}\n          ref={this.remoteVideoRef}\n          autoPlay\n        ></video>\n\n        <button onClick={this.createOffer}>Offer</button>\n        <button onClick={this.createAnswer}>Answer</button>\n        <br />\n        <textarea\n          ref={(ref) => {\n            this.textarea = ref;\n          }}\n        />\n        <br />\n        <button onClick={this.setRemoteDescription}>\n          Set remote description\n        </button>\n        <button onClick={this.addCandidate}>Add cadidate</button>\n      </div>\n    );\n  } */\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\"> Welcome to React </h1>\n        </header>\n        <PeerConnection />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}