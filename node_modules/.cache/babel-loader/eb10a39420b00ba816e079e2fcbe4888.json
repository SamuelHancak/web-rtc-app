{"ast":null,"code":"import _classCallCheck from\"/Users/samuelhancak/Documents/WebRTC/web-rtc-audio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/samuelhancak/Documents/WebRTC/web-rtc-audio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/samuelhancak/Documents/WebRTC/web-rtc-audio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/samuelhancak/Documents/WebRTC/web-rtc-audio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import io from\"socket.io-client\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);// https://reactjs.org/docs/refs-and-the-dom.html\n_this.componentDidMount=function(){_this.socket=io(\"/webrtcPeer\",{path:\"/web-rtc-audio\",query:{}});_this.socket.on(\"connection-success\",function(success){console.log(success);});_this.socket.on(\"offerOrAnswer\",function(sdp){_this.textref=JSON.stringify(sdp);// set sdp as remote description\n_this.pc.setRemoteDescription(new RTCSessionDescription(sdp));});_this.socket.on(\"candidate\",function(candidate){// console.log('From Peer... ', JSON.stringify(candidate))\n// this.candidates = [...this.candidates, candidate]\n_this.pc.addIceCandidate(new RTCIceCandidate(candidate));});// const pc_config = null\nvar pc_config={iceServers:[// {\n//   urls: 'stun:[STUN_IP]:[PORT]',\n//   'credentials': '[YOR CREDENTIALS]',\n//   'username': '[USERNAME]'\n// },\n{urls:\"stun:stun.l.google.com:19302\"}]};// https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n// create an instance of RTCPeerConnection\n_this.pc=new RTCPeerConnection(pc_config);// triggered when a new candidate is returned\n_this.pc.onicecandidate=function(e){// send the candidates to the remote peer\n// see addCandidate below to be triggered on the remote peer\nif(e.candidate){// console.log(JSON.stringify(e.candidate))\n_this.sendToPeer(\"candidate\",e.candidate);}};// triggered when there is a change in connection state\n_this.pc.oniceconnectionstatechange=function(e){console.log(e);};// triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n_this.pc.onaddstream=function(e){_this.remoteVideoref.current.srcObject=e.stream;};// called when getUserMedia() successfully returns - see below\n// getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\nvar success=function success(stream){window.localStream=stream;_this.localVideoref.current.srcObject=stream;_this.pc.addStream(stream);};// called when getUserMedia() fails - see below\nvar failure=function failure(e){console.log(\"getUserMedia Error: \",e);};// https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n// see the above link for more constraint options\nvar constraints={audio:true//video: false,\n// video: {\n//   width: 1280,\n//   height: 720\n// },\n// video: {\n//   width: { min: 1280 },\n// }\n};// https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\nnavigator.mediaDevices.getUserMedia(constraints).then(success).catch(failure);};_this.sendToPeer=function(messageType,payload){_this.socket.emit(messageType,{socketID:_this.socket.id,payload:payload});};_this.createOffer=function(){console.log(\"Offer\");// https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n// initiates the creation of SDP\n_this.pc.createOffer({offerToReceiveVideo:1}).then(function(sdp){// console.log(JSON.stringify(sdp))\n// set offer sdp as local description\n_this.pc.setLocalDescription(sdp);_this.sendToPeer(\"offerOrAnswer\",sdp);});};_this.createAnswer=function(){console.log(\"Answer\");_this.pc.createAnswer({offerToReceiveVideo:1}).then(function(sdp){// console.log(JSON.stringify(sdp))\n// set answer sdp as local description\n_this.pc.setLocalDescription(sdp);_this.sendToPeer(\"offerOrAnswer\",sdp);});};_this.setRemoteDescription=function(){// retrieve and parse the SDP copied from the remote peer\nvar desc=JSON.parse(_this.textref.value);// set sdp as remote description\n_this.pc.setRemoteDescription(new RTCSessionDescription(desc));};_this.addCandidate=function(){// retrieve and parse the Candidate copied from the remote peer\n// const candidate = JSON.parse(this.textref.value)\n// console.log('Adding candidate:', candidate)\n// add the candidate to the peer connection\n// this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n_this.candidates.forEach(function(candidate){console.log(JSON.stringify(candidate));_this.pc.addIceCandidate(new RTCIceCandidate(candidate));});};_this.localVideoref=React.createRef();_this.remoteVideoref=React.createRef();_this.socket=null;_this.candidates=[];return _this;}_createClass(App,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"audio\",{ref:this.localVideoref}),/*#__PURE__*/React.createElement(\"audio\",{ref:this.remoteVideoref}),/*#__PURE__*/React.createElement(\"button\",{onClick:this.createOffer},\"Offer\"),/*#__PURE__*/React.createElement(\"button\",{onClick:this.createAnswer},\"Answer\"));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/samuelhancak/Documents/WebRTC/web-rtc-audio/src/App.js"],"names":["React","Component","io","App","props","componentDidMount","socket","path","query","on","success","console","log","sdp","textref","JSON","stringify","pc","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","pc_config","iceServers","urls","RTCPeerConnection","onicecandidate","e","sendToPeer","oniceconnectionstatechange","onaddstream","remoteVideoref","current","srcObject","stream","window","localStream","localVideoref","addStream","failure","constraints","audio","navigator","mediaDevices","getUserMedia","then","catch","messageType","payload","emit","socketID","id","createOffer","offerToReceiveVideo","setLocalDescription","createAnswer","desc","parse","value","addCandidate","candidates","forEach","createRef"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport io from \"socket.io-client\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // https://reactjs.org/docs/refs-and-the-dom.html\n    this.localVideoref = React.createRef();\n    this.remoteVideoref = React.createRef();\n\n    this.socket = null;\n    this.candidates = [];\n  }\n\n  componentDidMount = () => {\n    this.socket = io(\"/webrtcPeer\", {\n      path: \"/web-rtc-audio\",\n      query: {},\n    });\n\n    this.socket.on(\"connection-success\", (success) => {\n      console.log(success);\n    });\n\n    this.socket.on(\"offerOrAnswer\", (sdp) => {\n      this.textref = JSON.stringify(sdp);\n\n      // set sdp as remote description\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n    });\n\n    this.socket.on(\"candidate\", (candidate) => {\n      // console.log('From Peer... ', JSON.stringify(candidate))\n      // this.candidates = [...this.candidates, candidate]\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n\n    // const pc_config = null\n\n    const pc_config = {\n      iceServers: [\n        // {\n        //   urls: 'stun:[STUN_IP]:[PORT]',\n        //   'credentials': '[YOR CREDENTIALS]',\n        //   'username': '[USERNAME]'\n        // },\n        {\n          urls: \"stun:stun.l.google.com:19302\",\n        },\n      ],\n    };\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n    // create an instance of RTCPeerConnection\n    this.pc = new RTCPeerConnection(pc_config);\n\n    // triggered when a new candidate is returned\n    this.pc.onicecandidate = (e) => {\n      // send the candidates to the remote peer\n      // see addCandidate below to be triggered on the remote peer\n      if (e.candidate) {\n        // console.log(JSON.stringify(e.candidate))\n        this.sendToPeer(\"candidate\", e.candidate);\n      }\n    };\n\n    // triggered when there is a change in connection state\n    this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e);\n    };\n\n    // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n    this.pc.onaddstream = (e) => {\n      this.remoteVideoref.current.srcObject = e.stream;\n    };\n\n    // called when getUserMedia() successfully returns - see below\n    // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n    const success = (stream) => {\n      window.localStream = stream;\n      this.localVideoref.current.srcObject = stream;\n      this.pc.addStream(stream);\n    };\n\n    // called when getUserMedia() fails - see below\n    const failure = (e) => {\n      console.log(\"getUserMedia Error: \", e);\n    };\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    // see the above link for more constraint options\n    const constraints = {\n      audio: true,\n      //video: false,\n      // video: {\n      //   width: 1280,\n      //   height: 720\n      // },\n      // video: {\n      //   width: { min: 1280 },\n      // }\n    };\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(success)\n      .catch(failure);\n  };\n\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload,\n    });\n  };\n\n  /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\n\n  createOffer = () => {\n    console.log(\"Offer\");\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n    // initiates the creation of SDP\n    this.pc.createOffer({ offerToReceiveVideo: 1 }).then((sdp) => {\n      // console.log(JSON.stringify(sdp))\n\n      // set offer sdp as local description\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n    });\n  };\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\n  // creates an SDP answer to an offer received from remote peer\n  createAnswer = () => {\n    console.log(\"Answer\");\n    this.pc.createAnswer({ offerToReceiveVideo: 1 }).then((sdp) => {\n      // console.log(JSON.stringify(sdp))\n\n      // set answer sdp as local description\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n    });\n  };\n\n  setRemoteDescription = () => {\n    // retrieve and parse the SDP copied from the remote peer\n    const desc = JSON.parse(this.textref.value);\n\n    // set sdp as remote description\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc));\n  };\n\n  addCandidate = () => {\n    // retrieve and parse the Candidate copied from the remote peer\n    // const candidate = JSON.parse(this.textref.value)\n    // console.log('Adding candidate:', candidate)\n\n    // add the candidate to the peer connection\n    // this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n\n    this.candidates.forEach((candidate) => {\n      console.log(JSON.stringify(candidate));\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <audio ref={this.localVideoref}></audio>\n        <audio ref={this.remoteVideoref}></audio>\n\n        <button onClick={this.createOffer}>Offer</button>\n        <button onClick={this.createAnswer}>Answer</button>\n\n        {/* <br />\n        <textarea\n          style={{ width: 450, height: 40 }}\n          ref={(ref) => {\n            this.textref = ref;\n          }}\n        /> */}\n\n        {/* <br />\n        <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\n        <button onClick={this.addCandidate}>Add Candidate</button> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}