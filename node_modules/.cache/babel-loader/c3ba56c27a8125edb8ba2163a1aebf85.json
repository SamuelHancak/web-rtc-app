{"ast":null,"code":"import _classCallCheck from\"/Users/samuelhancak/Documents/WebRTC/web-rtc-audio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/samuelhancak/Documents/WebRTC/web-rtc-audio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/samuelhancak/Documents/WebRTC/web-rtc-audio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/samuelhancak/Documents/WebRTC/web-rtc-audio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import io from\"socket.io-client\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.componentDidMount=function(){_this.socket=io.connect(\"https://db912b54.ngrok.io/webrtcPeer\",{path:\"/io/web-rtc-audio\",query:{}});_this.socket.on(\"connection-success\",function(success){console.log(success);});_this.socket.on(\"offerOrAnswer\",function(sdp){_this.textref=JSON.stringify(sdp);_this.pc.setRemoteDescription(new RTCSessionDescription(sdp));});_this.socket.on(\"candidate\",function(candidate){_this.pc.addIceCandidate(new RTCIceCandidate(candidate));});var pc_config={iceServers:[{urls:\"turn:numb.viagenie.ca\",credential:\"Cristiano741258\",username:\"sam2323@azet.sk\"},{urls:\"stun:stun.l.google.com:19302\"}]};_this.pc=new RTCPeerConnection(pc_config);_this.pc.onicecandidate=function(e){if(e.candidate){_this.sendToPeer(\"candidate\",e.candidate);}};_this.pc.oniceconnectionstatechange=function(e){console.log(e);};_this.pc.ontrack=function(e){_this.remoteAudioref.current.srcObject=e.streams[0];};var success=function success(stream){window.localStream=stream;_this.localAudioref.current.srcObject=stream;_this.pc.addStream(stream);};var failure=function failure(e){console.log(\"getUserMedia Error: \",e);};var constraints={audio:true};navigator.mediaDevices.getUserMedia(constraints).then(success).catch(failure);};_this.sendToPeer=function(messageType,payload){_this.socket.emit(messageType,{socketID:_this.socket.id,payload:payload});};_this.createOffer=function(){console.log(\"Offer\");_this.pc.createOffer({offerToReceiveVideo:1}).then(function(sdp){_this.pc.setLocalDescription(sdp);_this.sendToPeer(\"offerOrAnswer\",sdp);});};_this.createAnswer=function(){console.log(\"Answer\");_this.pc.createAnswer({offerToReceiveVideo:1}).then(function(sdp){_this.pc.setLocalDescription(sdp);_this.sendToPeer(\"offerOrAnswer\",sdp);});};_this.setRemoteDescription=function(){var desc=JSON.parse(_this.textref);_this.pc.setRemoteDescription(new RTCSessionDescription(desc));};_this.addCandidate=function(){_this.candidates.forEach(function(candidate){console.log(JSON.stringify(candidate));_this.pc.addIceCandidate(new RTCIceCandidate(candidate));});};_this.localAudioref=React.createRef();_this.remoteAudioref=React.createRef();_this.socket=null;_this.candidates=[];return _this;}_createClass(App,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"audio\",{ref:this.localAudioref}),/*#__PURE__*/React.createElement(\"audio\",{ref:this.remoteAudioref,autoPlay:true}),/*#__PURE__*/React.createElement(\"button\",{onClick:this.createOffer},\"Offer\"),/*#__PURE__*/React.createElement(\"button\",{onClick:this.createAnswer},\"Answer\"));}}]);return App;}(Component);export default App;// import React, { Component } from \"react\";\n// import io from \"socket.io-client\";\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     // https://reactjs.org/docs/refs-and-the-dom.html\n//     this.localVideoref = React.createRef();\n//     this.remoteVideoref = React.createRef();\n//     this.socket = null;\n//     this.candidates = [];\n//   }\n//   componentDidMount = () => {\n//     this.socket = io.connect(\"https://db912b54.ngrok.io/webrtcPeer\", {\n//       path: \"/io/web-rtc-audio\",\n//       query: {},\n//     });\n//     this.socket.on(\"connection-success\", (success) => {\n//       console.log(success);\n//     });\n//     this.socket.on(\"offerOrAnswer\", (sdp) => {\n//       this.textref.value = JSON.stringify(sdp);\n//       // set sdp as remote description\n//       this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n//     });\n//     this.socket.on(\"candidate\", (candidate) => {\n//       // console.log('From Peer... ', JSON.stringify(candidate))\n//       // this.candidates = [...this.candidates, candidate]\n//       this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n//     });\n//     // const pc_config = null\n//     const pc_config = {\n//       iceServers: [\n//         {\n//           urls: \"turn:numb.viagenie.ca\",\n//           credential: \"Cristiano741258\",\n//           username: \"sam2323@azet.sk\",\n//         },\n//         {\n//           urls: \"stun:stun.l.google.com:19302\",\n//         },\n//       ],\n//     };\n//     // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n//     // create an instance of RTCPeerConnection\n//     this.pc = new RTCPeerConnection(pc_config);\n//     // triggered when a new candidate is returned\n//     this.pc.onicecandidate = (e) => {\n//       // send the candidates to the remote peer\n//       // see addCandidate below to be triggered on the remote peer\n//       if (e.candidate) {\n//         // console.log(JSON.stringify(e.candidate))\n//         this.sendToPeer(\"candidate\", e.candidate);\n//       }\n//     };\n//     // triggered when there is a change in connection state\n//     this.pc.oniceconnectionstatechange = (e) => {\n//       console.log(e);\n//     };\n//     // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n//     // this.pc.onaddstream = (e) => {\n//     //   this.remoteVideoref.current.srcObject = e.stream\n//     // }\n//     this.pc.ontrack = (e) => {\n//       debugger;\n//       this.remoteVideoref.current.srcObject = e.streams[0];\n//     };\n//     // called when getUserMedia() successfully returns - see below\n//     // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n//     const success = (stream) => {\n//       window.localStream = stream;\n//       this.localVideoref.current.srcObject = stream;\n//       this.pc.addStream(stream);\n//     };\n//     // called when getUserMedia() fails - see below\n//     const failure = (e) => {\n//       console.log(\"getUserMedia Error: \", e);\n//     };\n//     // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n//     // see the above link for more constraint options\n//     const constraints = {\n//       audio: true,\n//       video: true,\n//       // video: {\n//       //   width: 1280,\n//       //   height: 720\n//       // },\n//       // video: {\n//       //   width: { min: 1280 },\n//       // }\n//       options: {\n//         mirror: true,\n//       },\n//     };\n//     // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n//     navigator.mediaDevices\n//       .getUserMedia(constraints)\n//       .then(success)\n//       .catch(failure);\n//   };\n//   sendToPeer = (messageType, payload) => {\n//     this.socket.emit(messageType, {\n//       socketID: this.socket.id,\n//       payload,\n//     });\n//   };\n//   /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\n//   createOffer = () => {\n//     console.log(\"Offer\");\n//     // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n//     // initiates the creation of SDP\n//     this.pc.createOffer({ offerToReceiveVideo: 1 }).then((sdp) => {\n//       // console.log(JSON.stringify(sdp))\n//       // set offer sdp as local description\n//       this.pc.setLocalDescription(sdp);\n//       this.sendToPeer(\"offerOrAnswer\", sdp);\n//     });\n//   };\n//   // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\n//   // creates an SDP answer to an offer received from remote peer\n//   createAnswer = () => {\n//     console.log(\"Answer\");\n//     this.pc.createAnswer({ offerToReceiveVideo: 1 }).then((sdp) => {\n//       // console.log(JSON.stringify(sdp))\n//       // set answer sdp as local description\n//       this.pc.setLocalDescription(sdp);\n//       this.sendToPeer(\"offerOrAnswer\", sdp);\n//     });\n//   };\n//   setRemoteDescription = () => {\n//     // retrieve and parse the SDP copied from the remote peer\n//     const desc = JSON.parse(this.textref.value);\n//     // set sdp as remote description\n//     this.pc.setRemoteDescription(new RTCSessionDescription(desc));\n//   };\n//   addCandidate = () => {\n//     // retrieve and parse the Candidate copied from the remote peer\n//     // const candidate = JSON.parse(this.textref.value)\n//     // console.log('Adding candidate:', candidate)\n//     // add the candidate to the peer connection\n//     // this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n//     this.candidates.forEach((candidate) => {\n//       console.log(JSON.stringify(candidate));\n//       this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n//     });\n//   };\n//   render() {\n//     return (\n//       <div>\n//         <video\n//           style={{\n//             width: 240,\n//             height: 240,\n//             margin: 5,\n//             backgroundColor: \"black\",\n//           }}\n//           ref={this.localVideoref}\n//           autoPlay\n//           muted\n//         ></video>\n//         <video\n//           style={{\n//             width: 240,\n//             height: 240,\n//             margin: 5,\n//             backgroundColor: \"black\",\n//           }}\n//           ref={this.remoteVideoref}\n//           autoPlay\n//         ></video>\n//         <br />\n//         <button onClick={this.createOffer}>Offer</button>\n//         <button onClick={this.createAnswer}>Answer</button>\n//         <br />\n//         <textarea\n//           style={{ width: 450, height: 40 }}\n//           ref={(ref) => {\n//             this.textref = ref;\n//           }}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// export default App;","map":{"version":3,"sources":["/Users/samuelhancak/Documents/WebRTC/web-rtc-audio/src/App.js"],"names":["React","Component","io","App","props","componentDidMount","socket","connect","path","query","on","success","console","log","sdp","textref","JSON","stringify","pc","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","pc_config","iceServers","urls","credential","username","RTCPeerConnection","onicecandidate","e","sendToPeer","oniceconnectionstatechange","ontrack","remoteAudioref","current","srcObject","streams","stream","window","localStream","localAudioref","addStream","failure","constraints","audio","navigator","mediaDevices","getUserMedia","then","catch","messageType","payload","emit","socketID","id","createOffer","offerToReceiveVideo","setLocalDescription","createAnswer","desc","parse","addCandidate","candidates","forEach","createRef"],"mappings":"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":["import React, { Component } from \"react\";\n\nimport io from \"socket.io-client\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.localAudioref = React.createRef();\n    this.remoteAudioref = React.createRef();\n\n    this.socket = null;\n    this.candidates = [];\n  }\n\n  componentDidMount = () => {\n    this.socket = io.connect(\"https://db912b54.ngrok.io/webrtcPeer\", {\n      path: \"/io/web-rtc-audio\",\n      query: {},\n    });\n\n    this.socket.on(\"connection-success\", (success) => {\n      console.log(success);\n    });\n\n    this.socket.on(\"offerOrAnswer\", (sdp) => {\n      this.textref = JSON.stringify(sdp);\n\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n    });\n\n    this.socket.on(\"candidate\", (candidate) => {\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n\n    const pc_config = {\n      iceServers: [\n        {\n          urls: \"turn:numb.viagenie.ca\",\n          credential: \"Cristiano741258\",\n          username: \"sam2323@azet.sk\",\n        },\n        {\n          urls: \"stun:stun.l.google.com:19302\",\n        },\n      ],\n    };\n\n    this.pc = new RTCPeerConnection(pc_config);\n\n    this.pc.onicecandidate = (e) => {\n      if (e.candidate) {\n        this.sendToPeer(\"candidate\", e.candidate);\n      }\n    };\n\n    this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e);\n    };\n\n    this.pc.ontrack = (e) => {\n      this.remoteAudioref.current.srcObject = e.streams[0];\n    };\n\n    const success = (stream) => {\n      window.localStream = stream;\n      this.localAudioref.current.srcObject = stream;\n      this.pc.addStream(stream);\n    };\n\n    const failure = (e) => {\n      console.log(\"getUserMedia Error: \", e);\n    };\n\n    const constraints = {\n      audio: true,\n    };\n\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(success)\n      .catch(failure);\n  };\n\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload,\n    });\n  };\n\n  createOffer = () => {\n    console.log(\"Offer\");\n\n    this.pc.createOffer({ offerToReceiveVideo: 1 }).then((sdp) => {\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n    });\n  };\n\n  createAnswer = () => {\n    console.log(\"Answer\");\n    this.pc.createAnswer({ offerToReceiveVideo: 1 }).then((sdp) => {\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n    });\n  };\n\n  setRemoteDescription = () => {\n    const desc = JSON.parse(this.textref);\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc));\n  };\n\n  addCandidate = () => {\n    this.candidates.forEach((candidate) => {\n      console.log(JSON.stringify(candidate));\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <audio ref={this.localAudioref}></audio>\n        <audio ref={this.remoteAudioref} autoPlay></audio>\n\n        <button onClick={this.createOffer}>Offer</button>\n        <button onClick={this.createAnswer}>Answer</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// import React, { Component } from \"react\";\n\n// import io from \"socket.io-client\";\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n\n//     // https://reactjs.org/docs/refs-and-the-dom.html\n//     this.localVideoref = React.createRef();\n//     this.remoteVideoref = React.createRef();\n\n//     this.socket = null;\n//     this.candidates = [];\n//   }\n\n//   componentDidMount = () => {\n//     this.socket = io.connect(\"https://db912b54.ngrok.io/webrtcPeer\", {\n//       path: \"/io/web-rtc-audio\",\n//       query: {},\n//     });\n\n//     this.socket.on(\"connection-success\", (success) => {\n//       console.log(success);\n//     });\n\n//     this.socket.on(\"offerOrAnswer\", (sdp) => {\n//       this.textref.value = JSON.stringify(sdp);\n\n//       // set sdp as remote description\n//       this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n//     });\n\n//     this.socket.on(\"candidate\", (candidate) => {\n//       // console.log('From Peer... ', JSON.stringify(candidate))\n//       // this.candidates = [...this.candidates, candidate]\n//       this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n//     });\n\n//     // const pc_config = null\n\n//     const pc_config = {\n//       iceServers: [\n//         {\n//           urls: \"turn:numb.viagenie.ca\",\n//           credential: \"Cristiano741258\",\n//           username: \"sam2323@azet.sk\",\n//         },\n//         {\n//           urls: \"stun:stun.l.google.com:19302\",\n//         },\n//       ],\n//     };\n\n//     // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n//     // create an instance of RTCPeerConnection\n//     this.pc = new RTCPeerConnection(pc_config);\n\n//     // triggered when a new candidate is returned\n//     this.pc.onicecandidate = (e) => {\n//       // send the candidates to the remote peer\n//       // see addCandidate below to be triggered on the remote peer\n//       if (e.candidate) {\n//         // console.log(JSON.stringify(e.candidate))\n//         this.sendToPeer(\"candidate\", e.candidate);\n//       }\n//     };\n\n//     // triggered when there is a change in connection state\n//     this.pc.oniceconnectionstatechange = (e) => {\n//       console.log(e);\n//     };\n\n//     // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n//     // this.pc.onaddstream = (e) => {\n//     //   this.remoteVideoref.current.srcObject = e.stream\n//     // }\n\n//     this.pc.ontrack = (e) => {\n//       debugger;\n//       this.remoteVideoref.current.srcObject = e.streams[0];\n//     };\n\n//     // called when getUserMedia() successfully returns - see below\n//     // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n//     const success = (stream) => {\n//       window.localStream = stream;\n//       this.localVideoref.current.srcObject = stream;\n//       this.pc.addStream(stream);\n//     };\n\n//     // called when getUserMedia() fails - see below\n//     const failure = (e) => {\n//       console.log(\"getUserMedia Error: \", e);\n//     };\n\n//     // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n//     // see the above link for more constraint options\n//     const constraints = {\n//       audio: true,\n//       video: true,\n//       // video: {\n//       //   width: 1280,\n//       //   height: 720\n//       // },\n//       // video: {\n//       //   width: { min: 1280 },\n//       // }\n//       options: {\n//         mirror: true,\n//       },\n//     };\n\n//     // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n//     navigator.mediaDevices\n//       .getUserMedia(constraints)\n//       .then(success)\n//       .catch(failure);\n//   };\n\n//   sendToPeer = (messageType, payload) => {\n//     this.socket.emit(messageType, {\n//       socketID: this.socket.id,\n//       payload,\n//     });\n//   };\n\n//   /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\n\n//   createOffer = () => {\n//     console.log(\"Offer\");\n\n//     // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n//     // initiates the creation of SDP\n//     this.pc.createOffer({ offerToReceiveVideo: 1 }).then((sdp) => {\n//       // console.log(JSON.stringify(sdp))\n\n//       // set offer sdp as local description\n//       this.pc.setLocalDescription(sdp);\n\n//       this.sendToPeer(\"offerOrAnswer\", sdp);\n//     });\n//   };\n\n//   // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\n//   // creates an SDP answer to an offer received from remote peer\n//   createAnswer = () => {\n//     console.log(\"Answer\");\n//     this.pc.createAnswer({ offerToReceiveVideo: 1 }).then((sdp) => {\n//       // console.log(JSON.stringify(sdp))\n\n//       // set answer sdp as local description\n//       this.pc.setLocalDescription(sdp);\n\n//       this.sendToPeer(\"offerOrAnswer\", sdp);\n//     });\n//   };\n\n//   setRemoteDescription = () => {\n//     // retrieve and parse the SDP copied from the remote peer\n//     const desc = JSON.parse(this.textref.value);\n\n//     // set sdp as remote description\n//     this.pc.setRemoteDescription(new RTCSessionDescription(desc));\n//   };\n\n//   addCandidate = () => {\n//     // retrieve and parse the Candidate copied from the remote peer\n//     // const candidate = JSON.parse(this.textref.value)\n//     // console.log('Adding candidate:', candidate)\n\n//     // add the candidate to the peer connection\n//     // this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n\n//     this.candidates.forEach((candidate) => {\n//       console.log(JSON.stringify(candidate));\n//       this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <video\n//           style={{\n//             width: 240,\n//             height: 240,\n//             margin: 5,\n//             backgroundColor: \"black\",\n//           }}\n//           ref={this.localVideoref}\n//           autoPlay\n//           muted\n//         ></video>\n//         <video\n//           style={{\n//             width: 240,\n//             height: 240,\n//             margin: 5,\n//             backgroundColor: \"black\",\n//           }}\n//           ref={this.remoteVideoref}\n//           autoPlay\n//         ></video>\n//         <br />\n\n//         <button onClick={this.createOffer}>Offer</button>\n//         <button onClick={this.createAnswer}>Answer</button>\n\n//         <br />\n//         <textarea\n//           style={{ width: 450, height: 40 }}\n//           ref={(ref) => {\n//             this.textref = ref;\n//           }}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}