{"version":3,"sources":["components/video.jsx","components/videos.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Video","props","state","this","videoStream","video","srcObject","nextProps","style","frameStyle","id","muted","autoPlay","videoStyles","ref","Component","Videos","rVideos","remoteStreams","_rVideos","map","rVideo","index","name","display","key","stream","height","width","float","padding","cursor","objectFit","borderRadius","setState","zIndex","position","backgroundColor","top","whiteSpace","RTCPeerConnectionConfig","iceServers","urls","sdpConstraints","mandatory","OfferToReceiveAudio","OfferToReceiveVideo","peerConnections","App","getLocalStream","constraints","audio","isAdmin","max","frameRate","navigator","mediaDevices","getUserMedia","then","localStream","catch","e","console","log","componentDidMount","socket","io","connect","query","admin","sendToPeer","messageType","payload","emit","socketId","createPeerConnection","remoteSocketId","callback","pc","RTCPeerConnection","onicecandidate","candidate","onnegotiationneeded","oniceconnectionstatechange","event","ontrack","track","selectedVideo","remoteStreamsCopy","streamObjIndex","findIndex","push","MediaStream","addTrack","close","on","addIceCandidate","RTCIceCandidate","peerCount","status","getTracks","forEach","createOffer","offer","setLocalDescription","desc","localDescription","setRemoteDescription","RTCSessionDescription","filter","createAnswer","answer","switchVideo","_video","window","location","pathname","statusText","color","minHeight","right","bottom","margin","minWidth","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9e2029ef.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Video extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    if (this.props.videoStream) {\n      this.video.srcObject = this.props.videoStream;\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.videoStream &&\n      nextProps.videoStream !== this.props.videoStream\n    ) {\n      this.video.srcObject = nextProps.videoStream;\n    }\n  }\n\n  render() {\n    return (\n      <div style={{ ...this.props.frameStyle }}>\n        <video\n          id={this.props.id}\n          muted={this.props.muted}\n          autoPlay\n          style={{ ...this.props.videoStyles }}\n          // ref={ this.props.videoRef }\n          ref={(ref) => {\n            this.video = ref;\n          }}\n        ></video>\n      </div>\n    );\n  }\n}\n\nexport default Video;\n","import React, { Component } from \"react\";\nimport Video from \"./video\";\n\nclass Videos extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rVideos: [],\n      remoteStreams: [],\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.remoteStreams !== nextProps.remoteStreams) {\n      let _rVideos = nextProps.remoteStreams.map((rVideo, index) => {\n        return (\n          <div\n            id={rVideo.name}\n            //onClick={() => this.props.switchVideo(rVideo)}\n            style={{ display: \"inline\" }}\n            key={index}\n          >\n            <Video\n              videoStream={rVideo.stream}\n              frameStyle={{\n                height: 120,\n                width: 213,\n                float: \"left\",\n                padding: \"0 3px\",\n              }}\n              videoStyles={{\n                cursor: \"disabled\",\n                objectFit: \"cover\",\n                borderRadius: 3,\n                height: 120,\n                width: 213,\n                //width: \"100%\",\n              }}\n            />\n          </div>\n        );\n      });\n\n      this.setState({\n        remoteStreams: nextProps.remoteStreams,\n        rVideos: _rVideos,\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          zIndex: 3,\n          position: \"fixed\",\n          padding: \"6px 3px\",\n          backgroundColor: \"rgba(0,0,0,0.3)\",\n          height: 120,\n          //width: 213,\n          top: \"auto\",\n          //right: 10,\n          // left: 10,\n          //bottom: 10,\n          //overflowX: \"block\",\n          whiteSpace: \"nowrap\",\n        }}\n      >\n        {this.state.rVideos}\n      </div>\n    );\n  }\n}\n\nexport default Videos;\n","import React, { Component } from \"react\";\n\nimport io from \"socket.io-client\";\n\nimport Video from \"./components/video\";\nimport Videos from \"./components/videos\";\n\nconst RTCPeerConnectionConfig = {\n  iceServers: [\n    // {\n    //   urls: \"turn:numb.viagenie.ca\",\n    //   credential: \"@DGSTSj5mJukHRC\",\n    //   username: \"sam2323@azet.sk\",\n    // },\n    {\n      urls: \"stun:stun.l.google.com:19302\",\n    },\n  ],\n};\n\nconst sdpConstraints = {\n  mandatory: {\n    OfferToReceiveAudio: true,\n    OfferToReceiveVideo: true,\n  },\n};\n\nlet peerConnections = {};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      localStream: null, // used to hold local stream object to avoid recreating the stream everytime a new offer comes\n\n      //mute: false,\n\n      remoteStreams: [], // holds all Video Streams (all remote streams)\n      selectedVideo: null,\n\n      status: \"Please wait...\",\n\n      isAdmin: window.location.pathname === \"/admin\",\n    };\n  }\n\n  getLocalStream = () => {\n    const { isAdmin } = this.state;\n    // called when getUserMedia() successfully returns - see below\n    // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n    const success = (stream) => {\n      this.setState({\n        localStream: stream,\n      });\n\n      // var audioTracks = stream.getAudioTracks();\n      // for (var i = 0; i < audioTracks.length; ++i) {\n      //   audioTracks[i].enabled = this.state.mute;\n      // }\n\n      // if (isAdmin) {\n      //   audioTracks[0].enabled = true;\n      // }\n    };\n\n    // called when getUserMedia() fails - see below\n    const failure = (e) => {\n      console.log(\"getUserMedia Error: \", e);\n    };\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    // see the above link for more constraint options\n    const constraints = {\n      audio: true,\n      //video: true,\n      video: isAdmin\n        ? {\n            width: {\n              max: 1280,\n            },\n            height: {\n              max: 720,\n            },\n            frameRate: {\n              max: 30,\n            },\n          }\n        : {\n            width: {\n              max: 426,\n            },\n            height: {\n              max: 240,\n            },\n            frameRate: {\n              max: 15,\n            },\n          },\n    };\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    return navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(success)\n      .catch(failure);\n  };\n\n  componentDidMount = () => {\n    const { isAdmin } = this.state;\n\n    this.getLocalStream().then(() => {\n      // TODO: add to END\n      // socket = io.connect(\"https://20bb5aa6.ngrok.io/webrtcPeer\", {\n      // const socket = io.connect(\"http://localhost:8080\", {\n      const socket = io.connect(\"https://coronastage-stream.herokuapp.com\", {\n        query: {\n          admin: isAdmin,\n        },\n      });\n\n      const sendToPeer = (messageType, payload = null) => {\n        socket.emit(messageType, {\n          socketId: socket.id,\n          payload,\n        });\n      };\n\n      const createOffer = (pc) => {\n        return pc\n          .createOffer(sdpConstraints)\n          .then((offer) => pc.setLocalDescription(offer))\n          .then(() => {\n            sendToPeer(\"offer\", {\n              desc: pc.localDescription,\n            });\n          });\n      };\n\n      const createPeerConnection = (remoteSocketId, callback) => {\n        try {\n          let pc = new RTCPeerConnection(RTCPeerConnectionConfig);\n\n          // add pc to peerConnections object\n          peerConnections = {\n            ...peerConnections,\n            [remoteSocketId]: pc,\n          };\n\n          pc.onicecandidate = ({ candidate }) => {\n            console.log(\"onicecandidate\", { candidate });\n\n            if (candidate) {\n              sendToPeer(\"candidate\", { candidate });\n            }\n          };\n\n          pc.onnegotiationneeded = () => {\n            console.log(\"onnegotiationneeded\");\n\n            // createOffer(pc);\n          };\n\n          pc.oniceconnectionstatechange = (event) => {\n            console.log(\"oniceconnectionstatechange\", { event });\n\n            console.log(pc);\n          };\n\n          pc.ontrack = (event) => {\n            console.log(\"ontrack\", { event });\n\n            const track = event.track;\n\n            if (track) {\n              this.setState(({ selectedVideo, remoteStreams }) => {\n                let remoteStreamsCopy = [...remoteStreams];\n\n                // find existing stream to append audio to it or create new stream\n                let streamObjIndex = remoteStreamsCopy.findIndex(\n                  (stream) => stream.id === remoteSocketId\n                );\n\n                // create new stream if not in list\n                if (streamObjIndex === -1) {\n                  streamObjIndex =\n                    remoteStreamsCopy.push({\n                      id: remoteSocketId,\n                      name: remoteSocketId,\n                      stream: new MediaStream(),\n                    }) - 1;\n                }\n\n                // add track to stream\n                remoteStreamsCopy[streamObjIndex].stream.addTrack(track);\n\n                return {\n                  selectedVideo:\n                    selectedVideo || remoteStreamsCopy[streamObjIndex],\n                  remoteStreams: remoteStreamsCopy,\n                };\n              });\n            }\n          };\n\n          pc.close = () => {\n            // alert('GONE')\n          };\n\n          // return pc\n          callback(pc);\n        } catch (e) {\n          console.log(\"Something went wrong! pc not created!!\", e);\n          // return;\n          callback(null);\n        }\n      };\n\n      socket.on(\"candidate\", ({ socketId, candidate }) => {\n        // get remote's peerConnection\n        const pc = peerConnections[socketId];\n\n        if (pc) {\n          pc.addIceCandidate(new RTCIceCandidate(candidate));\n        }\n      });\n\n      socket.on(\"connectionSuccess\", ({ peerCount }) => {\n        const status = isAdmin\n          ? peerCount > 0\n            ? `Total Connected Peers: ${peerCount}`\n            : \"Waiting for other peers to connect\"\n          : \"Connected\";\n\n        this.setState({\n          status,\n        });\n      });\n\n      if (isAdmin) {\n        socket.on(\"peerJoin\", ({ socketId, peerCount }) => {\n          console.log(\"peerJoin\", { socketId, peerCount });\n\n          this.setState({\n            status:\n              peerCount > 0\n                ? `Total Connected Peers: ${peerCount}`\n                : \"Waiting for other peers to connect\",\n          });\n\n          createPeerConnection(socketId, (pc) => {\n            // send video and audio to peer\n            if (this.state.localStream) {\n              this.state.localStream\n                .getTracks()\n                .forEach((track) => pc.addTrack(track));\n            }\n\n            createOffer(pc);\n          });\n        });\n\n        socket.on(\"answer\", ({ socketId, desc }) => {\n          console.log(\"answer\", { socketId, desc });\n\n          // get remote's peerConnection\n          const pc = peerConnections[socketId];\n\n          if (pc) {\n            pc.setRemoteDescription(new RTCSessionDescription(desc));\n          }\n        });\n\n        socket.on(\"peerDisconnect\", ({ socketId }) => {\n          console.log(\"peerDisconnect\", { socketId });\n\n          this.setState(({ remoteStreams, selectedVideo }) => {\n            const newStreams = remoteStreams.filter(\n              (stream) => stream.id !== socketId\n            );\n\n            return {\n              remoteStreams: newStreams,\n              // check if disconnected peer is the selected video and if there still connected peers, then select the first\n              selectedVideo:\n                selectedVideo && selectedVideo.id === socketId\n                  ? remoteStreams[0]\n                  : selectedVideo,\n            };\n          });\n        });\n      } else {\n        socket.on(\"offer\", ({ socketId, desc }) => {\n          console.log(\"offer\", { socketId, desc });\n\n          createPeerConnection(socketId, (pc) => {\n            // send video and audio to peer\n            if (this.state.localStream) {\n              this.state.localStream\n                .getTracks()\n                .forEach((track) => pc.addTrack(track));\n            }\n\n            pc.setRemoteDescription(new RTCSessionDescription(desc))\n              .then(() => pc.createAnswer(sdpConstraints))\n              .then((answer) => pc.setLocalDescription(answer))\n              .then(() => {\n                sendToPeer(\"answer\", {\n                  desc: pc.localDescription,\n                });\n              });\n          });\n        });\n      }\n    });\n  };\n\n  switchVideo = (_video) => {\n    this.setState({\n      selectedVideo: _video,\n    });\n  };\n\n  render() {\n    //console.log(this.state.localStream);\n\n    const statusText = (\n      <div style={{ color: \"yellow\", padding: 5 }}>{this.state.status}</div>\n    );\n\n    return (\n      <div style={{ backgroundColor: \"black\", minHeight: \"100%\" }}>\n        {this.state.isAdmin ? (\n          <>\n            <div>\n              <Videos\n                //switchVideo={this.switchVideo}\n                remoteStreams={this.state.remoteStreams}\n              ></Videos>\n            </div>\n            <Video\n              videoStyles={{\n                zIndex: 2,\n                position: \"absolute\",\n                right: 10,\n                bottom: 10,\n                width: 200,\n                height: 200,\n                margin: 5,\n                backgroundColor: \"black\",\n              }}\n              // ref={this.localVideoref}\n              videoStream={this.state.localStream}\n              autoPlay\n              muted\n            ></Video>\n            <div\n              style={{\n                zIndex: 4,\n                position: \"absolute\",\n                margin: 10,\n                backgroundColor: \"#cdc4ff4f\",\n                padding: 10,\n                borderRadius: 5,\n                right: 10,\n                bottom: 200,\n              }}\n            >\n              {statusText}\n            </div>\n          </>\n        ) : (\n          <>\n            <Video\n              videoStyles={{\n                zIndex: 2,\n                position: \"absolute\",\n                right: 0,\n                width: 200,\n                height: 200,\n                margin: 5,\n                backgroundColor: \"black\",\n              }}\n              // ref={this.localVideoref}\n              videoStream={this.state.localStream}\n              autoPlay\n              muted\n            ></Video>\n\n            {this.state.selectedVideo ? (\n              <Video\n                videoStyles={{\n                  zIndex: 1,\n                  position: \"fixed\",\n                  bottom: 0,\n                  minWidth: \"100%\",\n                  minHeight: \"100%\",\n                  backgroundColor: \"black\",\n                }}\n                // ref={ this.remoteVideoref }\n                videoStream={this.state.selectedVideo.stream}\n                autoPlay\n                //muted={this.state.muted}\n              ></Video>\n            ) : null}\n\n            <div\n              style={{\n                zIndex: 4,\n                position: \"absolute\",\n                margin: 10,\n                backgroundColor: \"#cdc4ff4f\",\n                padding: 10,\n                borderRadius: 5,\n              }}\n            >\n              {statusText}\n            </div>\n\n            <div\n              style={{\n                zIndex: 5,\n                position: \"absolute\",\n                margin: 10,\n                right: 10,\n                bottom: 120,\n              }}\n            >\n              {/* <button\n                onMouseDown={() => {\n                  for (\n                    var i = 0;\n                    i < this.state.localStream.getAudioTracks().length;\n                    ++i\n                  ) {\n                    this.state.localStream.getAudioTracks()[i].enabled = true;\n                  }\n                }}\n                onMouseUp={() => {\n                  for (\n                    var i = 0;\n                    i < this.state.localStream.getAudioTracks().length;\n                    ++i\n                  ) {\n                    this.state.localStream.getAudioTracks()[i].enabled = false;\n                  }\n                }}\n              >\n                Push to talk\n              </button> */}\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}